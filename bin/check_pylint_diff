#!/usr/bin/env bash
# Copyright (C) 2016 Google Inc., authors, and contributors <see AUTHORS file>
# Licensed under http://www.apache.org/licenses/LICENSE-2.0 <see LICENSE file>
# Created By: miha@reciprocitylabs.com
# Maintained By: miha@reciprocitylabs.com

set -o nounset
set -o errexit

ARG1=${1:-}
TMP_REPO="/tmp/ggrc-core"
SCRIPT=$(basename "$0")
SCRIPTPATH=$( cd "$(dirname "$0")" ; pwd -P )

if [[ "$ARG1" == "-h" || "$ARG1" == "--help" ]]; then
  echo "
Usage: $SCRIPT [test_commit] [-h]

This script will compare pylint error count from two different commits.
Note: all changes that are not committed will be ignored.


Given the commit tree:

       D---E---F---G---H
            \\         /
             A---B---C

- Running '$SCRIPT' on C will check the diff between B and C
- Running '$SCRIPT' on H will check the diff between G and H
- Running '$SCRIPT F' on H will check the diff between F and H
"
  exit 0
fi

rm -rf $TMP_REPO
cp -a /vagrant $TMP_REPO
cd $TMP_REPO
git clean -xdfq
git reset --hard HEAD

if [[ "$ARG1" != "" ]]; then
  TEST_COMMIT=$ARG1
else
  TEST_COMMIT=$(git rev-parse HEAD)
fi

CURRENT_COMMIT=$(git rev-parse HEAD)
PARENT_1=$(git show --pretty=raw $TEST_COMMIT | grep parent | head -1 | grep -oE "[^ ]*$")

echo "Comparing commits $TEST_COMMIT and $PARENT_1."

CHANGED_FILES=$(git diff --name-only $TEST_COMMIT $PARENT_1 | grep "\.py$" || true )
if [[ "$CHANGED_FILES" == "" ]]; then
  echo "No python files changed. Skipping flake checks"
  exit 0
fi

echo "Checking files:"
echo "$CHANGED_FILES"
echo ""

# Run pylint on the old and new code, to compare the quality.
# If pylint is run multiple times it will store the previous results and show
# the change in quality with a non-negative number if code was improved or not
# changed, and a negative number if more code issues have been introduced.

function run_pylint() {
  
  result=$(echo "$CHANGED_FILES" | xargs pylint 2> /dev/null | tail -n2 | \
    grep -E " [^ ]+/10" -o | head -n1 | grep -E -e "[^\.]+" -o | head -n1 \
    || true )

  if [[ "$result" != "" ]]; then
    echo $result
  else
    echo "0"
  fi
}

git checkout -q $PARENT_1
git clean -xdfq
git reset --hard HEAD
echo "running pylint on parent commit"
RESULT_1=$( run_pylint )

git checkout -q $TEST_COMMIT
git clean -xdfq
git reset --hard HEAD
echo "running pylint on test commit"
RESULT_2=$( run_pylint )

echo "
-------------------------------------------------------------------------------
"
echo "$CHANGED_FILES" | xargs pylint || true
echo "
-------------------------------------------------------------------------------
"

echo "Pylint results."
echo "Number of issues on parent commit: $RESULT_1"
echo "Number of issues on the pull request: $RESULT_2"

if [ "$RESULT_2" -le "$RESULT_1" ]; then
  echo "Ok"
  exit 0
else
  echo "FAIL: pylint score got worse"
  exit 1
fi
